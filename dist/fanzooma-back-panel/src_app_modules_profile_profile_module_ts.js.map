{"version":3,"file":"src_app_modules_profile_profile_module_ts.js","mappings":"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","sources":["./src/app/modules/admin/_services/admin.service.ts","./src/app/modules/profile/profile-routing.module.ts","./src/app/modules/profile/profile.module.ts","./src/app/modules/profile/update-profile/update-profile.component.ts","./src/app/modules/profile/update-profile/update-profile.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { FilterService } from 'app/core/service/FilterService.service';\nimport { environment } from 'environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminService extends FilterService {\n  private _isLoading$ = new BehaviorSubject<boolean>(false);\n  private _isLoadingtable$ = new BehaviorSubject<boolean>(false);\n\n  private apiUrl = environment.apiUrl;\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  get isLoading$() {\n    return this._isLoading$.asObservable();\n  }\n\n  get isLoadingtable$() {\n    return this._isLoadingtable$.asObservable();\n  }\n\n  create(admin: any) {\n    this._isLoading$.next(true);\n    return this.http.post(`${this.apiUrl}/user/add`, admin).pipe(\n      finalize(() => {\n        this._isLoading$.next(false);\n      })\n    );\n  }\n\n  getAll(params) {\n    this._isLoadingtable$.next(true);\n    return this.http.post(`${this.apiUrl}/admin/user/all`, params).pipe(\n      finalize(() => {\n        this._isLoadingtable$.next(false);\n      })\n    );\n  }\n\n  delete(id) {\n    return this.http.put(`${this.apiUrl}/user/change-status/${id}`, {\n      status: 3,\n    });\n    // return this.http.delete(`${this.apiUrl}/user/${id}`);\n  }\n\n  changestatus(id, status) {\n    return this.http.put(`${this.apiUrl}/user/change-status/${id}`, { status });\n  }\n\n  getById(id) {\n    return this.http.patch(`${this.apiUrl}/user/detail/${id}`, {});\n  }\n\n  updateBasicProfile(body) {\n    this._isLoading$.next(true);\n\n    return this.http\n      .post(`${this.apiUrl}/admin/user/profile-update`, body)\n      .pipe(\n        finalize(() => {\n          this._isLoading$.next(false);\n        })\n      );\n  }\n\n  updatePassword(body) {\n    this._isLoading$.next(true);\n\n    return this.http\n      .post(`${this.apiUrl}/admin/user/profile-password`, body)\n      .pipe(\n        finalize(() => {\n          this._isLoading$.next(false);\n        })\n      );\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { UpdateProfileComponent } from \"./update-profile/update-profile.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: UpdateProfileComponent,\n    data: { title: \"Update Profile\" },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProfileRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { PipeModule } from 'app/shared/pipes/pipe.module';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ProfileRoutingModule } from './profile-routing.module';\nimport { UpdateProfileComponent } from './update-profile/update-profile.component';\nimport { SharedModule } from 'app/shared/shared.module';\n\n\n@NgModule({\n  declarations: [\n    UpdateProfileComponent,\n  ],\n  imports: [\n    CommonModule,\n    ProfileRoutingModule,\n    NgxDatatableModule,\n    PipeModule,\n    NgbModule,\n    NgSelectModule,\n    FormsModule,\n    SharedModule,\n    ReactiveFormsModule,\n  ]\n})\nexport class ProfileModule { }\n","import {\n  ChangeDetectorRef,\n  Component,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UserModel } from 'app/core/models/user.model';\nimport { AdminService } from 'app/modules/admin/_services/admin.service';\nimport { AuthService } from 'app/core/service/auth/auth.service';\nimport { MustMatch } from 'app/shared/directives/must-match.validator';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport ServerErrors from 'app/core/shared/serverErrors';\n\n@Component({\n  selector: 'app-update-profile',\n  templateUrl: './update-profile.component.html',\n  styleUrls: [\n    './update-profile.component.scss',\n    '../../../../assets/sass/libs/select.scss',\n  ],\n})\nexport class UpdateProfileComponent implements OnInit {\n  submitted: boolean = false;\n  isLoading$;\n\n  profileForm: FormGroup;\n  passwordForm: FormGroup;\n\n  isProfileFormSubmitted = false;\n  isPasswordFormSubmitted = false;\n\n  profileErrors = new ServerErrors();\n  passwordErrors = new ServerErrors();\n\n  constructor(\n    private fb: FormBuilder,\n    private toastr: ToastrService,\n    private adminservice: AdminService,\n    public authserive: AuthService\n  ) {}\n\n  checkPasswords: ValidatorFn = (\n    group: AbstractControl\n  ): ValidationErrors | null => {\n    let pass = group.get('new_password').value;\n    let confirmPass = group.get('confirm_password').value;\n    return pass === confirmPass ? null : { notSame: true };\n  };\n\n  ngOnInit(): void {\n    this.initForm();\n    this.isLoading$ = this.adminservice.isLoading$;\n\n    const user = this.authserive.currentUserValue;\n    this.profileForm.patchValue({\n      name: user.name,\n      email: user.email,\n    });\n  }\n\n  initForm() {\n    this.profileForm = this.fb.group({\n      name: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(50),\n        ],\n      ],\n      email: [''],\n    });\n\n    this.passwordForm = this.fb.group(\n      {\n        password: ['', [Validators.minLength(6)]],\n        new_password: ['', [Validators.minLength(6)]],\n        confirm_password: [''],\n      },\n      { validator: this.checkPasswords }\n    );\n  }\n\n  updateBasicProfile() {\n    this.isProfileFormSubmitted = true;\n    if (this.profileForm.valid) {\n      this.adminservice.updateBasicProfile(this.profileForm.value).subscribe(\n        (resp: any) => {\n          const { data, message } = resp;\n          this.toastr.success(message, 'Success', {\n            positionClass: 'toast-top-right',\n          });\n          location.reload();\n        },\n        (err) => {\n          const { errors, message } = err.error;\n          this.profileErrors = errors;\n          this.toastr.error(message, 'Error', {\n            positionClass: 'toast-top-right',\n          });\n        }\n      );\n    }\n  }\n\n  updatePassword() {\n    this.isPasswordFormSubmitted = true;\n    if (this.passwordForm.valid) {\n      this.adminservice.updatePassword(this.passwordForm.value).subscribe(\n        (resp: any) => {\n          const { data, message } = resp;\n          this.toastr.success(message, 'Success', {\n            positionClass: 'toast-top-right',\n          });\n          location.reload();\n        },\n        (err) => {\n          const { errors, message } = err.error;\n          this.passwordErrors.errors = errors;\n          this.toastr.error(message, 'Error', {\n            positionClass: 'toast-top-right',\n          });\n        }\n      );\n    }\n  }\n}\n","<!-- Basic Inputs start -->\n<section id=\"basic-input\">\n  <form [formGroup]=\"profileForm\" (ngSubmit)=\"updateBasicProfile()\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <div class=\"card customisecard\">\n          <div class=\"card-header\">\n            <h4 class=\"card-title mt-1\">Update Basic Profile</h4>\n          </div>\n          <div class=\"card-content\">\n            <div class=\"card-body\">\n              <ul class=\"errorsclass\" *ngIf=\"profileErrors.errors.length > 0\">\n                <li *ngFor=\"let error of profileErrors.errors\">{{ error }}</li>\n              </ul>\n              <div class=\"row\">\n                <div class=\"col-md-4\">\n                  <fieldset class=\"form-group\">\n                    <label for=\"nameinput\"\n                      >Name <span class=\"text-danger\">*</span></label\n                    >\n                    <input\n                      type=\"text\"\n                      class=\"form-control form-control-sm\"\n                      id=\"nameinput\"\n                      [ngClass]=\"{\n                        'is-valid': profileForm.get('name').valid\n                      }\"\n                      placeholder=\"Enter Email\"\n                      placeholder=\"Enter Name\"\n                      formControlName=\"name\"\n                    />\n                    <div\n                      class=\"text-danger\"\n                      *ngIf=\"\n                        isProfileFormSubmitted &&\n                        profileForm.get('name').errors &&\n                        profileForm.get('name').hasError('required')\n                      \"\n                    >\n                      <span class=\"errormessage\">Name is required</span>\n                    </div>\n                    <div\n                      class=\"text-danger\"\n                      *ngIf=\"\n                        isProfileFormSubmitted &&\n                        profileForm.get('name').errors &&\n                        profileForm.get('name').hasError('minlength')\n                      \"\n                    >\n                      <span class=\"errormessage\"\n                        >Name should be more than 2 character</span\n                      >\n                    </div>\n                    <div\n                      class=\"text-danger\"\n                      *ngIf=\"\n                        isProfileFormSubmitted &&\n                        profileForm.get('name').errors &&\n                        profileForm.get('name').hasError('maxlength')\n                      \"\n                    >\n                      <span class=\"errormessage\"\n                        >Name shouldn't be more than 50 character.</span\n                      >\n                    </div>\n                  </fieldset>\n                </div>\n                <div class=\"col-md-4\">\n                  <fieldset class=\"form-group\">\n                    <label for=\"emailinput\"\n                      >Email <span class=\"text-danger\">*</span></label\n                    >\n                    <input\n                      disabled\n                      type=\"text\"\n                      class=\"form-control form-control-sm\"\n                      id=\"emailinput\"\n                      [ngClass]=\"{\n                        'is-valid': profileForm.get('email').valid\n                      }\"\n                      placeholder=\"Enter Email\"\n                      formControlName=\"email\"\n                    />\n                  </fieldset>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"card-footer\">\n            <button\n              type=\"submit\"\n              class=\"btn btn-sm btn-primary mr-2\"\n              [disabled]=\"isLoading$ | async\"\n            >\n              <i class=\"ft-check-square mr-1\"></i> Update\n              <i class=\"fa fa-spinner fa-spin\" *ngIf=\"isLoading$ | async\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n  <form [formGroup]=\"passwordForm\" (ngSubmit)=\"updatePassword()\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <div class=\"card customisecard\">\n          <div class=\"card-header\">\n            <h4 class=\"card-title mt-1\">Update Password</h4>\n          </div>\n          <div class=\"card-content\">\n            <div class=\"card-body\">\n              <ul class=\"errorsclass\" *ngIf=\"passwordErrors.errors.length > 0\">\n                <li *ngFor=\"let error of passwordErrors.errors\">{{ error }}</li>\n              </ul>\n              <div class=\"row\">\n                <div class=\"col-md-4\">\n                  <fieldset class=\"form-group\">\n                    <label for=\"passwordInput\"\n                      >Password <span class=\"text-danger\">*</span>\n                    </label>\n                    <input\n                      type=\"password\"\n                      autocomplete=\"new-password\"\n                      formControlName=\"password\"\n                      class=\"form-control form-control-sm\"\n                      id=\"passwordInput\"\n                      placeholder=\"Password\"\n                    />\n                    <div\n                      class=\"text-danger\"\n                      *ngIf=\"\n                        isPasswordFormSubmitted &&\n                        passwordForm.get('password').errors &&\n                        passwordForm.get('password').hasError('required')\n                      \"\n                    >\n                      <span class=\"errormessage\">Password is required</span>\n                    </div>\n                    <div\n                      class=\"text-danger\"\n                      *ngIf=\"\n                        isPasswordFormSubmitted &&\n                        passwordForm.get('password').errors &&\n                        passwordForm.get('password').hasError('minlength')\n                      \"\n                    >\n                      <span class=\"errormessage\"\n                        >password should be minimum 6 characters.</span\n                      >\n                    </div>\n                  </fieldset>\n                </div>\n                <div class=\"col-md-4\">\n                  <fieldset class=\"form-group\">\n                    <label for=\"passwordInput\"\n                      >New Password <span class=\"text-danger\">*</span>\n                    </label>\n                    <input\n                      type=\"password\"\n                      autocomplete=\"new-password\"\n                      formControlName=\"new_password\"\n                      class=\"form-control form-control-sm\"\n                      id=\"passwordInput\"\n                      placeholder=\"Password\"\n                    />\n                    <div\n                      class=\"text-danger\"\n                      *ngIf=\"\n                        isPasswordFormSubmitted &&\n                        passwordForm.get('new_password').errors &&\n                        passwordForm.get('new_password').hasError('required')\n                      \"\n                    >\n                      <span class=\"errormessage\">Password is required</span>\n                    </div>\n                    <div\n                      class=\"text-danger\"\n                      *ngIf=\"\n                        isPasswordFormSubmitted &&\n                        passwordForm.get('new_password').errors &&\n                        passwordForm.get('new_password').hasError('minlength')\n                      \"\n                    >\n                      <span class=\"errormessage\"\n                        >password should be minimum 6 characters.</span\n                      >\n                    </div>\n                  </fieldset>\n                </div>\n                <div class=\"col-md-4\">\n                  <fieldset class=\"form-group\">\n                    <label for=\"passwordInput\"\n                      >Confirm Password <span class=\"text-danger\">*</span>\n                    </label>\n                    <input\n                      type=\"password\"\n                      autocomplete=\"new-password\"\n                      formControlName=\"confirm_password\"\n                      class=\"form-control form-control-sm\"\n                      id=\"passwordInput\"\n                      placeholder=\"Password\"\n                    />\n                    <div\n                      class=\"text-danger\"\n                      *ngIf=\"\n                        isPasswordFormSubmitted &&\n                        passwordForm.get('confirm_password').errors &&\n                        passwordForm\n                          .get('confirm_password')\n                          .hasError('required')\n                      \"\n                    >\n                      <span class=\"errormessage\">Password is required</span>\n                    </div>\n                    <div\n                      class=\"text-danger\"\n                      *ngIf=\"\n                        isPasswordFormSubmitted &&\n                        passwordForm.get('confirm_password').errors &&\n                        passwordForm\n                          .get('confirm_password')\n                          .hasError('minlength')\n                      \"\n                    >\n                      <span class=\"errormessage\"\n                        >password should be minimum 6 characters.</span\n                      >\n                    </div>\n\n                    <div\n                      class=\"text-danger\"\n                      *ngIf=\"\n                        isPasswordFormSubmitted &&\n                        passwordForm.hasError('notSame')\n                      \"\n                    >\n                      <span class=\"errormessage\"\n                        >new password and confirm password should match.</span\n                      >\n                    </div>\n                  </fieldset>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"card-footer\">\n            <button\n              type=\"submit\"\n              class=\"btn btn-sm btn-primary mr-2\"\n              [disabled]=\"isLoading$ | async\"\n            >\n              <i class=\"ft-check-square mr-1\"></i> Update\n              <i class=\"fa fa-spinner fa-spin\" *ngIf=\"isLoading$ | async\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</section>\n<!-- Basic Inputs end -->\n"],"names":[],"sourceRoot":"webpack:///"}