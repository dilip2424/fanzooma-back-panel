{"ast":null,"code":"import { environment } from 'environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nexport let CommonService = /*#__PURE__*/(() => {\n  class CommonService {\n    constructor(http, location) {\n      this.http = http;\n      this.location = location;\n      this._isLoading$ = new BehaviorSubject(false);\n      this._isLoadingtable$ = new BehaviorSubject(false);\n      this._filterSource = new BehaviorSubject([]);\n      this.filter$ = this._filterSource.asObservable();\n      this.apiUrl = environment.apiUrl;\n    }\n\n    get isLoading$() {\n      return this._isLoading$.asObservable();\n    }\n\n    get isLoadingtable$() {\n      return this._isLoadingtable$.asObservable();\n    }\n\n    getFilters() {\n      return this._filterSource.getValue();\n    }\n\n    setFilters(filter) {\n      this._filterSource.next(filter);\n    }\n\n    getall(params) {\n      this._isLoadingtable$.next(true);\n\n      return this.http.post(`${this.apiUrl}/general/account`, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n    getPlans() {\n      this._isLoading$.next(true);\n\n      return this.http.get(`${this.apiUrl}/admin/plans`).pipe(finalize(() => {\n        this._isLoading$.next(false);\n      }));\n    }\n\n    getallcategory(params) {\n      this._isLoadingtable$.next(true);\n\n      return this.http.post(`${this.apiUrl}/general/category`, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n    getallenergyleavel(params) {\n      this._isLoadingtable$.next(true);\n\n      return this.http.post(`${this.apiUrl}/general/energy/level`, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n    creatorrightholder(params) {\n      this._isLoadingtable$.next(true);\n\n      return this.http.post(`${this.apiUrl}/general/creator/rights/holder`, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n    getallchannel(params) {\n      this._isLoadingtable$.next(true);\n\n      return this.http.post(`${this.apiUrl}/general/channel`, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n    getallartist() {\n      return this.http.get(`${this.apiUrl}/general/artist`);\n    }\n\n    getallcontracts(params) {\n      return this.http.post(`${this.apiUrl}/general/contract`, params);\n    }\n\n    getactivecontract(params) {\n      return this.http.post(`${this.apiUrl}/general/rights/holders/contract`, params);\n    }\n\n    verifychennal(params) {\n      this._isLoadingtable$.next(true);\n\n      return this.http.post(`${this.apiUrl}/general/channel/info`, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n    accesstoken(channel_id, json) {\n      return this.http.put(`${this.apiUrl}/channel/access-token/${channel_id}`, json);\n    }\n\n    getAccessToken(code, redirect_uri) {\n      return this.http.post(`${this.apiUrl}/channel/google/access-token`, {\n        code,\n        redirect_uri\n      });\n    }\n\n    getGoogleAuth(redirect_uri, state = '') {\n      return this.http.post(`${this.apiUrl}/channel/google/code`, {\n        redirect_uri,\n        state\n      });\n    }\n\n  }\n\n  CommonService.ɵfac = function CommonService_Factory(t) {\n    return new (t || CommonService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Location));\n  };\n\n  CommonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommonService,\n    factory: CommonService.ɵfac,\n    providedIn: 'root'\n  });\n  return CommonService;\n})();","map":null,"metadata":{},"sourceType":"module"}