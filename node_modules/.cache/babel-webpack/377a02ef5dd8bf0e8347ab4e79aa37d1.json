{"ast":null,"code":"import { environment } from 'environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ArtistService = /*#__PURE__*/(() => {\n  class ArtistService {\n    constructor(http) {\n      this.http = http;\n      this._isLoading$ = new BehaviorSubject(false);\n      this._isLoadingtable$ = new BehaviorSubject(false);\n      this.apiUrl = environment.apiUrl;\n    }\n\n    get isLoading$() {\n      return this._isLoading$.asObservable();\n    }\n\n    get isLoadingtable$() {\n      return this._isLoadingtable$.asObservable();\n    }\n\n    getall(params) {\n      this._isLoadingtable$.next(true);\n\n      return this.http.post(`${this.apiUrl}/artist`, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n    getallartist() {\n      return this.http.post(`${this.apiUrl}/artist/dropdown`, {\n        search: \"\"\n      });\n    }\n\n    changestatus(id, status) {\n      return this.http.put(`${this.apiUrl}/artist/change-status/${id}`, {\n        status\n      });\n    }\n\n    getById(id) {\n      return this.http.patch(`${this.apiUrl}/artist/detail/${id}`, {});\n    }\n\n    create(params) {\n      this._isLoading$.next(true);\n\n      return this.http.post(`${this.apiUrl}/artist/add`, params).pipe(finalize(() => {\n        this._isLoading$.next(false);\n      }));\n    }\n\n  }\n\n  ArtistService.ɵfac = function ArtistService_Factory(t) {\n    return new (t || ArtistService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ArtistService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ArtistService,\n    factory: ArtistService.ɵfac,\n    providedIn: 'root'\n  });\n  return ArtistService;\n})();","map":null,"metadata":{},"sourceType":"module"}