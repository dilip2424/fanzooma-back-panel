{"ast":null,"code":"import { environment } from \"environments/environment\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { finalize } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ContactUsService = /*#__PURE__*/(() => {\n  class ContactUsService {\n    constructor(http) {\n      this.http = http;\n      this._isLoading$ = new BehaviorSubject(false);\n      this._isLoadingTable$ = new BehaviorSubject(false);\n      this._badgeCount$ = new BehaviorSubject(0);\n      this.apiUrl = environment.apiUrl;\n    }\n\n    get isLoading$() {\n      return this._isLoading$.asObservable();\n    }\n\n    get isLoadingTable$() {\n      return this._isLoadingTable$.asObservable();\n    }\n\n    get badgeCount$() {\n      return this._badgeCount$.asObservable();\n    }\n\n    addContactUs(contactData) {\n      this._isLoading$.next(true);\n\n      return this.http.post(`${this.apiUrl}/contact-us/add`, contactData).pipe(finalize(() => {\n        this._isLoading$.next(false);\n      }));\n    }\n\n    getContactUs(params) {\n      this._isLoadingTable$.next(true);\n\n      return this.http.post(`${this.apiUrl}/contact-us`, params).pipe(finalize(() => {\n        this._isLoadingTable$.next(false);\n      }));\n    }\n\n    setStatus(id, body) {\n      this._isLoading$.next(true);\n\n      return this.http.put(`${this.apiUrl}/contact-us/change-status/${id}`, body).pipe(finalize(() => {\n        this._isLoading$.next(false);\n\n        this.getBadgeCount();\n      }));\n    }\n\n    getBadgeCount() {\n      this._isLoading$.next(true);\n\n      return this.http.get(`${this.apiUrl}/contact-us/badge/count`).pipe(finalize(() => {\n        this._isLoading$.next(false);\n      })).subscribe(response => {\n        this._badgeCount$.next(response.result);\n      });\n    }\n\n  }\n\n  ContactUsService.ɵfac = function ContactUsService_Factory(t) {\n    return new (t || ContactUsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ContactUsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContactUsService,\n    factory: ContactUsService.ɵfac,\n    providedIn: \"root\"\n  });\n  return ContactUsService;\n})();","map":null,"metadata":{},"sourceType":"module"}