{"ast":null,"code":"import { FilterService } from 'app/core/service/FilterService.service';\nimport { environment } from 'environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AdminService = /*#__PURE__*/(() => {\n  class AdminService extends FilterService {\n    constructor(http) {\n      super();\n      this.http = http;\n      this._isLoading$ = new BehaviorSubject(false);\n      this._isLoadingtable$ = new BehaviorSubject(false);\n      this.apiUrl = environment.apiUrl;\n    }\n\n    get isLoading$() {\n      return this._isLoading$.asObservable();\n    }\n\n    get isLoadingtable$() {\n      return this._isLoadingtable$.asObservable();\n    }\n\n    create(admin) {\n      this._isLoading$.next(true);\n\n      return this.http.post(`${this.apiUrl}/user/add`, admin).pipe(finalize(() => {\n        this._isLoading$.next(false);\n      }));\n    }\n\n    getAll(params) {\n      this._isLoadingtable$.next(true);\n\n      return this.http.post(`${this.apiUrl}/admin/user/all`, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n    delete(id) {\n      return this.http.put(`${this.apiUrl}/user/change-status/${id}`, {\n        status: 3\n      }); // return this.http.delete(`${this.apiUrl}/user/${id}`);\n    }\n\n    changestatus(id, status) {\n      return this.http.put(`${this.apiUrl}/user/change-status/${id}`, {\n        status\n      });\n    }\n\n    getById(id) {\n      return this.http.patch(`${this.apiUrl}/user/detail/${id}`, {});\n    }\n\n    updateBasicProfile(body) {\n      this._isLoading$.next(true);\n\n      return this.http.post(`${this.apiUrl}/admin/user/profile-update`, body).pipe(finalize(() => {\n        this._isLoading$.next(false);\n      }));\n    }\n\n    updatePassword(body) {\n      this._isLoading$.next(true);\n\n      return this.http.post(`${this.apiUrl}/admin/user/profile-password`, body).pipe(finalize(() => {\n        this._isLoading$.next(false);\n      }));\n    }\n\n  }\n\n  AdminService.ɵfac = function AdminService_Factory(t) {\n    return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AdminService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminService,\n    factory: AdminService.ɵfac,\n    providedIn: 'root'\n  });\n  return AdminService;\n})();","map":null,"metadata":{},"sourceType":"module"}