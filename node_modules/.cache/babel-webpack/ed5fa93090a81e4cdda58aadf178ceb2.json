{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./config.service\";\nexport let CustomizerService = /*#__PURE__*/(() => {\n  class CustomizerService {\n    constructor(config) {\n      this.config = config; // sidebar BG colors for Light & Dark Layout\n\n      this.light_dark_colors = [{\n        code: \"mint\",\n        class: \"gradient-mint\",\n        active: false,\n        type: 'gradient'\n      }, {\n        code: \"king-yna\",\n        class: \"gradient-king-yna\",\n        active: false,\n        type: 'gradient'\n      }, {\n        code: \"ibiza-sunset\",\n        class: \"gradient-ibiza-sunset\",\n        active: false,\n        type: 'gradient'\n      }, {\n        code: \"flickr\",\n        class: \"gradient-flickr\",\n        active: false,\n        type: 'gradient'\n      }, {\n        code: \"purple-bliss\",\n        class: \"gradient-purple-bliss\",\n        active: false,\n        type: 'gradient'\n      }, {\n        code: \"man-of-steel\",\n        class: \"gradient-man-of-steel\",\n        active: false,\n        type: 'gradient'\n      }, {\n        code: \"purple-love\",\n        class: \"gradient-purple-love\",\n        active: false,\n        type: 'gradient'\n      }, {\n        code: \"black\",\n        class: \"bg-black\",\n        active: false,\n        type: 'solid'\n      }, {\n        code: \"white\",\n        class: \"bg-grey\",\n        active: false,\n        type: 'solid'\n      }, {\n        code: \"primary\",\n        class: \"bg-primary\",\n        active: false,\n        type: 'solid'\n      }, {\n        code: \"success\",\n        class: \"bg-success\",\n        active: false,\n        type: 'solid'\n      }, {\n        code: \"warning\",\n        class: \"bg-warning\",\n        active: false,\n        type: 'solid'\n      }, {\n        code: \"info\",\n        class: \"bg-info\",\n        active: false,\n        type: 'solid'\n      }, {\n        code: \"danger\",\n        class: \"bg-danger\",\n        active: false,\n        type: 'solid'\n      }]; // sidebar BG colors for Transparent Layout\n\n      this.transparent_colors = [{\n        class: \"bg-glass-hibiscus\",\n        active: false\n      }, {\n        class: \"bg-glass-purple-pizzazz\",\n        active: false\n      }, {\n        class: \"bg-glass-blue-lagoon\",\n        active: false\n      }, {\n        class: \"bg-glass-electric-violet\",\n        active: false\n      }, {\n        class: \"bg-glass-portage\",\n        active: false\n      }, {\n        class: \"bg-glass-tundora\",\n        active: false\n      }]; // sidebar BG images for Light & Dark Layout\n\n      this.light_dark_bg_images = [{\n        src: \"assets/img/sidebar-bg/01.jpg\",\n        active: false\n      }, {\n        src: \"assets/img/sidebar-bg/02.jpg\",\n        active: false\n      }, {\n        src: \"assets/img/sidebar-bg/03.jpg\",\n        active: false\n      }, {\n        src: \"assets/img/sidebar-bg/04.jpg\",\n        active: false\n      }, {\n        src: \"assets/img/sidebar-bg/05.jpg\",\n        active: false\n      }, {\n        src: \"assets/img/sidebar-bg/06.jpg\",\n        active: false\n      }]; // Background Colors with Shades for Transparent Layout\n\n      this.transparent_colors_with_shade = [{\n        class: \"bg-glass-1\",\n        active: false\n      }, {\n        class: \"bg-glass-2\",\n        active: false\n      }, {\n        class: \"bg-glass-3\",\n        active: false\n      }, {\n        class: \"bg-glass-4\",\n        active: false\n      }];\n      this.lightDarkLayoutGradientBGColors = [];\n      this.lightDarkLayoutSolidBGColors = [];\n      this.transparentLayoutBGColors = [];\n      this.transparentLayoutBGColorsWithShades = [];\n      this.lightDarkLayoutBGImages = [];\n      this.getData();\n    }\n\n    getData() {\n      this.lightDarkLayoutGradientBGColors = this.getlightDarkLayoutGradientBGColors();\n      this.lightDarkLayoutSolidBGColors = this.getlightDarkLayoutSolidBGColors();\n      this.transparentLayoutBGColors = this.getTransparentLayoutBGColors();\n      this.transparentLayoutBGColorsWithShades = this.GetTransparentLayoutBGColorsWithShades();\n      this.lightDarkLayoutBGImages = this.getLightDarkLayoutBGImages();\n    }\n\n    getlightDarkLayoutGradientBGColors() {\n      return this.light_dark_colors.filter(_ => _.type === 'gradient').map(color => {\n        color.active = color.code === this.config.templateConf.layout.sidebar.backgroundColor;\n        return Object.assign({}, color);\n      });\n    }\n\n    getlightDarkLayoutSolidBGColors() {\n      return this.light_dark_colors.filter(_ => _.type === 'solid').map(color => {\n        color.active = color.code === this.config.templateConf.layout.sidebar.backgroundColor;\n        return Object.assign({}, color);\n      });\n    }\n\n    getTransparentLayoutBGColors() {\n      return this.transparent_colors.map(color => {\n        color.active = color.class === this.config.templateConf.layout.sidebar.backgroundColor;\n        return Object.assign({}, color);\n      });\n    }\n\n    GetTransparentLayoutBGColorsWithShades() {\n      return this.transparent_colors_with_shade.map(color => {\n        color.active = color.class === this.config.templateConf.layout.sidebar.backgroundColor;\n        return Object.assign({}, color);\n      });\n    }\n\n    getLightDarkLayoutBGImages() {\n      return this.light_dark_bg_images.map(image => {\n        image.active = image.src === this.config.templateConf.layout.sidebar.backgroundImageURL;\n        return Object.assign({}, image);\n      });\n    } //called when click to change on any Gradient/Solid color for Light & Dark layout in customizer\n\n\n    changeSidebarBGColor(color) {\n      let conf = this.config.templateConf;\n      conf.layout.sidebar.backgroundColor = color.code;\n      this.config.applyTemplateConfigChange({\n        layout: conf.layout\n      });\n      this.getData();\n    } //called when click to change on any Transparent color for Transparent layout in customizer\n\n\n    changeSidebarTransparentBGColor(color) {\n      let conf = this.config.templateConf;\n      conf.layout.sidebar.backgroundColor = color.class;\n      conf.layout.sidebar.backgroundImage = false;\n      conf.layout.sidebar.backgroundImageURL = '';\n      this.config.applyTemplateConfigChange({\n        layout: conf.layout\n      });\n      this.getData();\n    } //called when click to change on any image for Light & Dark layout in customizer\n\n\n    changeSidebarBgImage(image) {\n      let conf = this.config.templateConf;\n      conf.layout.sidebar.backgroundImageURL = image.src;\n      this.config.applyTemplateConfigChange({\n        layout: conf.layout\n      });\n      this.getData();\n    }\n\n    bgImageDisplay(e) {\n      let conf = this.config.templateConf;\n\n      if (e.target.checked) {\n        conf.layout.sidebar.backgroundImage = true;\n      } else {\n        conf.layout.sidebar.backgroundImage = false;\n      }\n\n      this.config.applyTemplateConfigChange({\n        layout: conf.layout\n      });\n    }\n\n    toggleCompactMenu(e) {\n      let conf = this.config.templateConf;\n\n      if (e.target.checked) {\n        conf.layout.sidebar.collapsed = true;\n      } else {\n        conf.layout.sidebar.collapsed = false;\n      }\n\n      this.config.applyTemplateConfigChange({\n        layout: conf.layout\n      });\n    }\n\n    changeSidebarWidth(value) {\n      let conf = this.config.templateConf;\n      conf.layout.sidebar.size = value;\n      this.config.applyTemplateConfigChange({\n        layout: conf.layout\n      });\n    }\n\n    toggleNavbarType(value) {\n      let conf = this.config.templateConf;\n      conf.layout.navbar.type = value;\n      this.config.applyTemplateConfigChange({\n        layout: conf.layout\n      });\n    } // position: \"Side\" for vertical menu and position: \"Top\" for horizontal menu\n\n\n    toggleMenuPosition(position) {\n      let conf = this.config.templateConf;\n      conf.layout.menuPosition = position;\n      this.config.applyTemplateConfigChange({\n        layout: conf.layout\n      });\n    }\n\n    switchLayout(layout, isBgImageDisplay) {\n      let conf = this.config.templateConf;\n\n      if (layout.toLowerCase() === 'light') {\n        conf.layout.variant = 'Light';\n        conf.layout.sidebar.backgroundImageURL = this.light_dark_bg_images[0].src;\n        conf.layout.sidebar.backgroundColor = this.light_dark_colors[5].code;\n        conf.layout.sidebar.backgroundImage = isBgImageDisplay;\n      } else if (layout.toLowerCase() === 'dark') {\n        conf.layout.variant = 'Dark';\n        conf.layout.sidebar.backgroundImageURL = this.light_dark_bg_images[2].src;\n        conf.layout.sidebar.backgroundColor = this.light_dark_colors[7].code;\n        conf.layout.sidebar.backgroundImage = isBgImageDisplay;\n      } else if (layout.toLowerCase() === 'transparent') {\n        conf.layout.variant = 'Transparent';\n        conf.layout.sidebar.backgroundImageURL = \"\";\n        conf.layout.sidebar.backgroundColor = this.transparent_colors_with_shade[0].class;\n      }\n\n      this.config.applyTemplateConfigChange({\n        layout: conf.layout\n      });\n      this.getData();\n    }\n\n  }\n\n  CustomizerService.ɵfac = function CustomizerService_Factory(t) {\n    return new (t || CustomizerService)(i0.ɵɵinject(i1.ConfigService));\n  };\n\n  CustomizerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomizerService,\n    factory: CustomizerService.ɵfac,\n    providedIn: \"root\"\n  });\n  return CustomizerService;\n})();","map":null,"metadata":{},"sourceType":"module"}