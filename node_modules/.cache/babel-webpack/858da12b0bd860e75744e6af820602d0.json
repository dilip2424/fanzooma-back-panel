{"ast":null,"code":"import { environment } from \"environments/environment\";\nimport { BehaviorSubject, of } from \"rxjs\";\nimport { finalize, map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, route) {\n      this.http = http;\n      this.router = router;\n      this.route = route;\n      this.unsubscribe = [];\n      this.apiUrl = environment.apiUrl;\n      this.isLoadingSubject = new BehaviorSubject(false);\n      this.isLoading$ = this.isLoadingSubject.asObservable();\n      this.currentUserSubject = new BehaviorSubject(undefined);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n    }\n\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n\n    set currentUserValue(user) {\n      this.currentUserSubject.next(user);\n    }\n\n    login(data) {\n      this.isLoadingSubject.next(true);\n      return this.http.post(`${this.apiUrl}/admin/login`, data).pipe(map(auth => {\n        const result = this.setStorage(auth.data);\n        this.currentUserSubject.next(auth.data.user);\n        return auth;\n      }), finalize(() => this.isLoadingSubject.next(false)));\n    }\n\n    checktokenisvalid(data) {\n      return this.http.post(`${this.apiUrl}/user/verify/token`, data).pipe(map(auth => {\n        return auth;\n      }));\n    }\n\n    forgotpassword(data) {\n      this.isLoadingSubject.next(true);\n      return this.http.post(`${this.apiUrl}/user/reset-password`, data).pipe(map(auth => {\n        return auth;\n      }), finalize(() => this.isLoadingSubject.next(false)));\n    }\n\n    resetpassword(data) {\n      this.isLoadingSubject.next(true);\n      return this.http.post(`${this.apiUrl}/user/change/password`, data).pipe(map(auth => {\n        return auth;\n      }), finalize(() => this.isLoadingSubject.next(false)));\n    }\n\n    getUserByToken() {\n      const token = this.getStorage();\n\n      if (!token) {\n        return of(undefined);\n      } else {\n        this.isLoadingSubject.next(true);\n        return this.http.get(`${this.apiUrl}/admin/user`, {}).pipe(map(user => {\n          if (user) {\n            this.currentUserSubject = new BehaviorSubject(user === null || user === void 0 ? void 0 : user.data);\n          } else {\n            this.logout();\n          }\n\n          return user;\n        }), finalize(() => this.isLoadingSubject.next(false)));\n      }\n    }\n\n    currentusertype() {\n      const user = this.currentUserValue;\n      return user.role;\n    }\n\n    isAdminCategory() {\n      var _a;\n\n      const admins = [1, 2, 5, 6, 7];\n      return admins.includes((_a = this.currentUserValue) === null || _a === void 0 ? void 0 : _a.type);\n    }\n\n    isCRUDAdmin() {\n      var _a;\n\n      const admins = [1, 2, 5];\n      return admins.includes((_a = this.currentUserValue) === null || _a === void 0 ? void 0 : _a.type);\n    }\n\n    isNonCRUDAdmin() {\n      var _a;\n\n      const admins = [6, 7];\n      return admins.includes((_a = this.currentUserValue) === null || _a === void 0 ? void 0 : _a.type);\n    }\n\n    isEarningAdmin() {\n      var _a;\n\n      const admins = [1, 2, 6];\n      return admins.includes((_a = this.currentUserValue) === null || _a === void 0 ? void 0 : _a.type);\n    }\n\n    isNonEarningAdmin() {\n      var _a;\n\n      const admins = [5, 7];\n      return admins.includes((_a = this.currentUserValue) === null || _a === void 0 ? void 0 : _a.type);\n    }\n\n    isCreator() {\n      var _a;\n\n      const admins = [3];\n      return admins.includes((_a = this.currentUserValue) === null || _a === void 0 ? void 0 : _a.type);\n    }\n\n    isRH() {\n      var _a;\n\n      const admins = [4];\n      return admins.includes((_a = this.currentUserValue) === null || _a === void 0 ? void 0 : _a.type);\n    }\n\n    getStorage() {\n      try {\n        const authData = localStorage.getItem(\"adm_token\");\n        return authData;\n      } catch (error) {\n        console.error(error);\n        return undefined;\n      }\n    }\n\n    logout() {\n      console.log(\"Logging out\");\n      localStorage.removeItem(\"adm_token\");\n      this.currentUserSubject.next(undefined);\n      this.router.navigate([\"/login\"]);\n    }\n\n    setStorage(auth) {\n      if (auth === null || auth === void 0 ? void 0 : auth.token) {\n        console.log(\"Setting the storage\");\n        localStorage.setItem(\"adm_token\", auth.token);\n        localStorage.setItem(\"user_id\", auth.user.id);\n      }\n    }\n\n    clearStorage() {\n      console.log(\"clearing the storage)\");\n      localStorage.removeItem(\"adm_token\");\n      this.currentUserSubject.next(undefined);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i2.ActivatedRoute));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}