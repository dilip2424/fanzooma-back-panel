{"ast":null,"code":"import { environment } from \"environments/environment\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { finalize } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let OrganizationService = /*#__PURE__*/(() => {\n  class OrganizationService {\n    constructor(http) {\n      this.http = http;\n      this._isLoading$ = new BehaviorSubject(false);\n      this._isLoadingtable$ = new BehaviorSubject(false);\n      this.apiUrl = environment.apiUrl;\n    }\n\n    get isLoading$() {\n      return this._isLoading$.asObservable();\n    }\n\n    get isLoadingtable$() {\n      return this._isLoadingtable$.asObservable();\n    }\n\n    getAll(params) {\n      this._isLoadingtable$.next(true);\n\n      return this.http.post(`${this.apiUrl}/admin/organization/all`, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n    getAllNames(params) {\n      this._isLoadingtable$.next(true);\n\n      return this.http.post(`${this.apiUrl}/admin/organization/all-names`, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n    changestatus(id, status) {\n      return this.http.post(`${this.apiUrl}/admin/organization/status/${id}`, {\n        status\n      });\n    }\n\n    getById(id) {\n      return this.http.post(`${this.apiUrl}/admin/organization/${id}`, {});\n    }\n\n    login(id) {\n      return this.http.post(`${this.apiUrl}/admin/organization/login/${id}`, {});\n    }\n\n  }\n\n  OrganizationService.ɵfac = function OrganizationService_Factory(t) {\n    return new (t || OrganizationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  OrganizationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrganizationService,\n    factory: OrganizationService.ɵfac,\n    providedIn: \"root\"\n  });\n  return OrganizationService;\n})();","map":null,"metadata":{},"sourceType":"module"}