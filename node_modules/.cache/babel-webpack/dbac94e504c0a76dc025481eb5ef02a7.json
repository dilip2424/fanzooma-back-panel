{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport { WINDOW } from 'app/shared/services/window.service';\nimport { NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/shared/services/config.service\";\nimport * as i2 from \"app/core/service/auth/auth.service\";\nimport * as i3 from \"app/shared/services/layout.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"app/shared/services/customizer.service\";\nimport * as i6 from \"ngx-device-detector\";\nimport * as i7 from \"../../shared/navbar/navbar.component\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"../../shared/footer/footer.component\";\nimport * as i10 from \"../../shared/notification-sidebar/notification-sidebar.component\";\nimport * as i11 from \"../../shared/horizontal-menu/horizontal-menu.component\";\nimport * as i12 from \"../../shared/directives/topmenu.directive\";\nimport * as i13 from \"../../shared/directives/sidebar.directive\";\nimport * as i14 from \"../../shared/vertical-menu/vertical-menu.component\";\n\nfunction FullLayoutComponent_app_horizontal_menu_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-horizontal-menu\", 11);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"background-image\": a0\n  };\n};\n\nfunction FullLayoutComponent_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 14);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(1, _c0, \"url(\" + ctx_r3.bgImage + \")\"));\n  }\n}\n\nconst _c1 = function (a0, a1, a2) {\n  return {\n    \"main-menu\": a0,\n    \"menu-fixed\": a1,\n    \"menu-native-scroll\": a2\n  };\n};\n\nfunction FullLayoutComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵlistener(\"mouseenter\", function FullLayoutComponent_div_3_Template_div_mouseenter_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.sidebarMouseenter($event);\n    })(\"mouseleave\", function FullLayoutComponent_div_3_Template_div_mouseleave_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.sidebarMouseleave($event);\n    });\n    i0.ɵɵelement(1, \"app-sidebar\");\n    i0.ɵɵtemplate(2, FullLayoutComponent_div_3_div_2_Template, 1, 3, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(4, _c1, ctx_r1.menuPosition === \"Side\" || ctx_r1.displayOverlayMenu, ctx_r1.menuPosition === \"Side\" || ctx_r1.displayOverlayMenu, !ctx_r1.perfectScrollbarEnable));\n    i0.ɵɵattribute(\"data-background-color\", (ctx_r1.config == null ? null : ctx_r1.config.layout.variant) === \"Transparent\" ? \"black\" : ctx_r1.bgColor)(\"data-image\", ctx_r1.bgImage);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.config == null ? null : ctx_r1.config.layout.sidebar.backgroundImage);\n  }\n}\n\nfunction FullLayoutComponent_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function FullLayoutComponent_button_10_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.scrollToTop();\n    });\n    i0.ɵɵelement(1, \"i\", 16);\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c2 = function (a0) {\n  return {\n    \"show-overlay\": a0\n  };\n};\n\nconst _c3 = function (a0, a1) {\n  return {\n    \"d-none\": a0,\n    \"d-block\": a1\n  };\n};\n\nexport let FullLayoutComponent = /*#__PURE__*/(() => {\n  class FullLayoutComponent {\n    constructor(configService, authserive, layoutService, router, customizerService, document, window, renderer, cdr, deviceService) {\n      this.configService = configService;\n      this.authserive = authserive;\n      this.layoutService = layoutService;\n      this.router = router;\n      this.customizerService = customizerService;\n      this.document = document;\n      this.window = window;\n      this.renderer = renderer;\n      this.cdr = cdr;\n      this.deviceService = deviceService;\n      this.hideSidebar = true;\n      this.overlayContent = false;\n      this.isSmallScreen = false;\n      this.menuPosition = 'Side';\n      this.displayOverlayMenu = false; // Vertical Side menu for screenSize < 1200\n\n      this.config = {};\n      this.isMenuCollapsedOnHover = false;\n      this.isNavbarSeachTextEmpty = true;\n      this.isScrollTopVisible = false;\n      this.config = this.configService.templateConf;\n      this.innerWidth = window.innerWidth; // On toggle sidebar menu\n\n      this.layoutSub = layoutService.toggleSidebar$.subscribe(isShow => {\n        this.hideSidebar = !isShow;\n\n        if (this.hideSidebar) {\n          this.overlayContent = false;\n        } else {\n          this.overlayContent = true;\n        }\n\n        this.toggleSidebar();\n      });\n    }\n\n    ngOnInit() {\n      this.userdata = this.authserive.currentUserValue;\n      this.configSub = this.configService.templateConf$.subscribe(templateConf => {\n        if (templateConf) {\n          const themetype = this.userdata.theme ? this.userdata.theme : 'light';\n\n          if (themetype == 'light') {\n            this.config = {\n              layout: {\n                variant: 'Light',\n                menuPosition: 'Side',\n                customizer: {\n                  hidden: true\n                },\n                navbar: {\n                  type: 'Static'\n                },\n                sidebar: {\n                  collapsed: this.configService.templateConf.layout.sidebar.collapsed,\n                  size: 'sidebar-md',\n                  backgroundColor: 'warning',\n                  backgroundImage: false,\n                  backgroundImageURL: 'assets/img/sidebar-bg/01.jpg'\n                }\n              }\n            };\n          } else {\n            this.config = {\n              layout: {\n                variant: 'Dark',\n                menuPosition: 'Side',\n                customizer: {\n                  hidden: true\n                },\n                navbar: {\n                  type: 'Static'\n                },\n                sidebar: {\n                  collapsed: this.configService.templateConf.layout.sidebar.collapsed,\n                  size: 'sidebar-md',\n                  backgroundColor: 'black',\n                  backgroundImage: true,\n                  backgroundImageURL: 'assets/img/sidebar-bg/01.jpg'\n                }\n              }\n            };\n          }\n        } //load layout\n\n\n        this.loadLayout();\n        this.cdr.markForCheck();\n      }); //hide overlay class on router change\n\n      this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(routeChange => {\n        if (this.config.layout.menuPosition === 'Side' || this.displayOverlayMenu) {\n          // Vertical Menu\n          if (this.innerWidth < 1200) {\n            this.layoutService.toggleSidebarSmallScreen(false);\n            this.overlayContent = false;\n            this.renderer.removeClass(this.document.body, 'overflow-hidden');\n          }\n        }\n      });\n    }\n\n    ngAfterViewInit() {\n      this.setMenuLayout();\n    }\n\n    ngOnDestroy() {\n      //Unsubcribe subscriptions\n      if (this.configSub) {\n        this.configSub.unsubscribe();\n      }\n\n      if (this.layoutSub) {\n        this.layoutSub.unsubscribe();\n      }\n    } //adjust layout\n\n\n    setMenuLayout() {\n      this.overlayContent = false;\n      this.renderer.removeClass(this.document.body, 'blank-page');\n\n      if (this.config.layout.menuPosition === 'Top') {\n        // Horizontal Menu\n        if (this.innerWidth < 1200) {\n          // Screen size < 1200\n          this.displayOverlayMenu = true;\n          this.hideSidebar = true;\n          this.renderer.removeClass(this.document.body, 'horizontal-menu');\n          this.renderer.removeClass(this.document.body, 'menu-open');\n          this.renderer.addClass(this.document.body, 'horizontal-layout');\n          this.renderer.addClass(this.document.body, 'horizontal-menu-padding');\n          this.renderer.addClass(this.document.body, 'vertical-layout');\n          this.renderer.addClass(this.document.body, 'vertical-overlay-menu');\n          this.renderer.addClass(this.document.body, 'fixed-navbar');\n          this.renderer.addClass(this.document.body, 'menu-hide');\n        } else {\n          // Screen size > 1200\n          this.displayOverlayMenu = false;\n          this.hideSidebar = false;\n          this.renderer.setAttribute(this.document.body, 'data-menu', 'horizontal-menu');\n          this.renderer.removeClass(this.document.body, 'vertical-layout');\n          this.renderer.removeClass(this.document.body, 'vertical-overlay-menu');\n          this.renderer.removeClass(this.document.body, 'fixed-navbar');\n          this.renderer.removeClass(this.document.body, 'menu-hide');\n          this.renderer.removeClass(this.document.body, 'vertical-menu'); // this.renderer.removeClass(this.document.body, \"blank-page\");\n\n          this.renderer.addClass(this.document.body, 'horizontal-menu');\n          this.renderer.addClass(this.document.body, 'horizontal-layout');\n          this.renderer.addClass(this.document.body, 'horizontal-menu-padding');\n        }\n      } else if (this.config.layout.menuPosition === 'Side') {\n        // Vertical Menu\n        if (this.innerWidth < 1200) {\n          // If Screen size < 1200\n          this.displayOverlayMenu = true;\n          this.renderer.removeClass(this.document.body, 'horizontal-layout');\n          this.renderer.removeClass(this.document.body, 'horizontal-menu');\n          this.renderer.removeClass(this.document.body, 'horizontal-menu-padding');\n          this.renderer.removeClass(this.document.body, 'menu-expanded');\n          this.renderer.removeClass(this.document.body, 'vertical-menu');\n          this.renderer.removeClass(this.document.body, 'menu-open');\n          this.renderer.removeClass(this.document.body, 'nav-collapsed');\n          this.renderer.addClass(this.document.body, 'vertical-layout');\n          this.renderer.addClass(this.document.body, 'menu-hide');\n        } else {\n          // If Screen size > 1200\n          this.displayOverlayMenu = false;\n          this.renderer.removeClass(this.document.body, 'horizontal-layout');\n          this.renderer.removeClass(this.document.body, 'horizontal-menu');\n          this.renderer.removeClass(this.document.body, 'horizontal-menu-padding'); // this.renderer.removeClass(this.document.body, \"blank-page\");\n\n          this.renderer.setAttribute(this.document.body, 'data-menu', 'vertical-menu');\n          this.renderer.addClass(this.document.body, 'vertical-layout');\n\n          if (!this.config.layout.sidebar.collapsed) {\n            this.renderer.addClass(this.document.body, 'menu-expanded');\n            this.renderer.addClass(this.document.body, 'menu-open');\n          }\n\n          this.renderer.addClass(this.document.body, 'vertical-menu');\n          this.renderer.removeClass(this.document.body, 'menu-hide');\n          this.renderer.removeClass(this.document.body, 'vertical-overlay-menu');\n        }\n      }\n    }\n\n    loadLayout() {\n      //menu position \"SIDE\" or \"TOP\"\n      if (this.config.layout.menuPosition && this.config.layout.menuPosition.toString().trim() != '') {\n        this.menuPosition = this.config.layout.menuPosition;\n      } //Hide/show sidebar menu background image\n\n\n      if (!this.config.layout.sidebar.backgroundImage) {\n        this.bgImage = '';\n      } else {\n        this.bgImage = this.config.layout.sidebar.backgroundImageURL;\n      } //Set sidebar menu background color\n\n\n      if (!this.config.layout.sidebar.backgroundColor) {\n        this.bgColor = this.customizerService.light_dark_colors[7].code;\n      } else {\n        this.bgColor = this.config.layout.sidebar.backgroundColor;\n      } //toggle side menu\n\n\n      if (this.config.layout.menuPosition === 'Side') {\n        if (this.config.layout.sidebar.collapsed) {\n          this.isMenuCollapsedOnHover = true;\n        } else {\n          this.isMenuCollapsedOnHover = true;\n        }\n\n        this.toggleSidebar();\n      }\n\n      this.removeTransparentBGClasses(); // Layout variants\n\n      if (this.config.layout.variant === 'Light') {\n        this.renderer.removeClass(this.document.body, 'layout-dark');\n        this.renderer.removeClass(this.document.body, 'layout-transparent');\n      } else if (this.config.layout.variant === 'Dark') {\n        this.renderer.removeClass(this.document.body, 'layout-transparent');\n        this.renderer.addClass(this.document.body, 'layout-dark');\n      } else if (this.config.layout.variant === 'Transparent') {\n        this.renderer.addClass(this.document.body, 'layout-dark');\n        this.renderer.addClass(this.document.body, 'layout-transparent');\n        this.renderer.addClass(this.document.body, this.bgColor);\n        this.bgImage = '';\n      }\n\n      this.setMenuLayout(); // For Sidebar width\n\n      if (this.config.layout.sidebar.size === 'sidebar-sm') {\n        this.renderer.removeClass(this.document.body, 'sidebar-lg');\n        this.renderer.addClass(this.document.body, 'sidebar-sm');\n      } else if (this.config.layout.sidebar.size === 'sidebar-lg') {\n        this.renderer.removeClass(this.document.body, 'sidebar-sm');\n        this.renderer.addClass(this.document.body, 'sidebar-lg');\n      } else {\n        this.renderer.removeClass(this.document.body, 'sidebar-sm');\n        this.renderer.removeClass(this.document.body, 'sidebar-lg');\n      }\n\n      if (this.config.layout.menuPosition === 'Side') {\n        // vertical/Side menu expanded/collapse\n        if (this.config.layout.sidebar.collapsed && !this.isSmallScreen) {\n          // collapse side menu\n          this.renderer.removeClass(this.document.body, 'menu-expanded');\n          this.renderer.addClass(this.document.body, 'nav-collapsed');\n        } else {\n          // expand side menu\n          this.renderer.removeClass(this.document.body, 'nav-collapsed');\n          this.renderer.addClass(this.document.body, 'menu-expanded');\n        }\n      } //Navbar types\n\n\n      if (this.config.layout.navbar.type === 'Static') {\n        this.renderer.removeClass(this.document.body, 'navbar-sticky');\n        this.renderer.addClass(this.document.body, 'navbar-static');\n      } else if (this.config.layout.navbar.type === 'Fixed') {\n        this.renderer.removeClass(this.document.body, 'navbar-static');\n        this.renderer.addClass(this.document.body, 'navbar-sticky');\n      }\n    }\n\n    toggleSidebar() {\n      if (this.hideSidebar) {\n        // on sidebar collapse\n        this.renderer.removeClass(this.document.body, 'menu-expanded');\n        this.renderer.removeClass(this.document.body, 'vertical-menu');\n        this.renderer.removeClass(this.document.body, 'menu-open');\n        this.renderer.addClass(this.document.body, 'vertical-layout');\n        this.renderer.addClass(this.document.body, 'menu-hide');\n\n        if (this.config.layout.menuPosition === 'Top') {\n          this.renderer.addClass(this.document.body, 'vertical-overlay-menu');\n        }\n      } else {\n        // on sidebar expand\n        this.renderer.addClass(this.document.body, 'vertical-layout');\n        this.renderer.addClass(this.document.body, 'menu-expanded');\n        this.renderer.addClass(this.document.body, 'vertical-menu');\n\n        if (this.config.layout.sidebar.collapsed) {\n          this.renderer.removeClass(this.document.body, 'menu-open');\n        } else {\n          this.renderer.addClass(this.document.body, 'menu-open');\n        }\n\n        this.renderer.removeClass(this.document.body, 'menu-hide');\n      }\n\n      this.isTouchDevice();\n    }\n\n    isTouchDevice() {\n      const isMobile = this.deviceService.isMobile();\n      const isTablet = this.deviceService.isTablet();\n\n      if (isMobile || isTablet) {\n        if (!this.hideSidebar) {\n          this.renderer.addClass(this.document.body, 'overflow-hidden');\n        } else {\n          this.renderer.removeClass(this.document.body, 'overflow-hidden');\n        }\n      }\n    }\n\n    hideCompactMenuOnSmallScreen() {\n      if (this.innerWidth < 1200) {\n        let conf = this.config;\n        conf.layout.sidebar.collapsed = false;\n        this.configService.applyTemplateConfigChange({\n          layout: conf.layout\n        });\n      }\n    } //Remove transparent layout classes\n\n\n    removeTransparentBGClasses() {\n      this.customizerService.transparent_colors.forEach(_ => {\n        this.renderer.removeClass(this.document.body, _.class);\n      });\n      this.customizerService.transparent_colors_with_shade.forEach(_ => {\n        this.renderer.removeClass(this.document.body, _.class);\n      });\n    }\n\n    sidebarMouseenter(e) {\n      if (this.config.layout.sidebar.collapsed) {\n        this.isMenuCollapsedOnHover = false;\n        this.layoutService.overlaySidebartoggle(this.isMenuCollapsedOnHover);\n      }\n    }\n\n    sidebarMouseleave(e) {\n      if (this.config.layout.sidebar.collapsed) {\n        this.isMenuCollapsedOnHover = true;\n        this.layoutService.overlaySidebartoggle(this.isMenuCollapsedOnHover);\n      }\n    } //scroll to top on click\n\n\n    scrollToTop() {\n      window.scroll({\n        top: 0,\n        left: 0,\n        behavior: 'smooth'\n      });\n    }\n\n    onOutsideClick(e) {\n      if (this.innerWidth < 1200) {\n        if (!e.target.classList.contains('toggleSidebarNavbarButton')) {\n          this.layoutService.toggleSidebarSmallScreen(false);\n        }\n      }\n    }\n\n    onWrapperClick() {\n      this.isNavbarSeachTextEmpty = true;\n    }\n\n    checkNavbarSeachTextEmpty($event) {\n      this.isNavbarSeachTextEmpty = $event;\n    }\n\n    onResize(event) {\n      if (this.resizeTimeout) {\n        clearTimeout(this.resizeTimeout);\n      }\n\n      this.resizeTimeout = setTimeout((() => {\n        this.innerWidth = event.target.innerWidth;\n        this.setMenuLayout();\n        this.hideCompactMenuOnSmallScreen();\n      }).bind(this), 500);\n    } //Add/remove classes on page scroll\n\n\n    onWindowScroll() {\n      let number = this.window.pageYOffset || this.document.documentElement.scrollTop || this.document.body.scrollTop || 0;\n\n      if (number > 60) {\n        this.renderer.addClass(this.document.body, 'navbar-scrolled');\n      } else {\n        this.renderer.removeClass(this.document.body, 'navbar-scrolled');\n      }\n\n      if (number > 400) {\n        this.isScrollTopVisible = true;\n      } else {\n        this.isScrollTopVisible = false;\n      }\n\n      if (number > 20) {\n        this.renderer.addClass(this.document.body, 'page-scrolled');\n      } else {\n        this.renderer.removeClass(this.document.body, 'page-scrolled');\n      }\n    }\n\n  }\n\n  FullLayoutComponent.ɵfac = function FullLayoutComponent_Factory(t) {\n    return new (t || FullLayoutComponent)(i0.ɵɵdirectiveInject(i1.ConfigService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.LayoutService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.CustomizerService), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(WINDOW), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i6.DeviceDetectorService));\n  };\n\n  FullLayoutComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FullLayoutComponent,\n    selectors: [[\"app-full-layout\"]],\n    hostBindings: function FullLayoutComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"resize\", function FullLayoutComponent_resize_HostBindingHandler($event) {\n          return ctx.onResize($event);\n        }, false, i0.ɵɵresolveWindow)(\"scroll\", function FullLayoutComponent_scroll_HostBindingHandler() {\n          return ctx.onWindowScroll();\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    decls: 14,\n    vars: 10,\n    consts: [[3, \"seachTextEmpty\"], [1, \"wrapper\", 3, \"ngClass\", \"click\", \"resize\"], [\"appTopMenu\", \"\", 4, \"ngIf\"], [\"appSidebar\", \"\", \"class\", \"app-sidebar\", \"data-active-color\", \"white\", 3, \"ngClass\", \"mouseenter\", \"mouseleave\", 4, \"ngIf\"], [1, \"main-panel\"], [1, \"main-content\"], [1, \"content-overlay\"], [1, \"content-wrapper\"], [\"class\", \"btn btn-primary scroll-top\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [1, \"sidenav-overlay\", 3, \"ngClass\", \"click\"], [1, \"drag-target\"], [\"appTopMenu\", \"\"], [\"appSidebar\", \"\", \"data-active-color\", \"white\", 1, \"app-sidebar\", 3, \"ngClass\", \"mouseenter\", \"mouseleave\"], [\"class\", \"sidebar-background\", 3, \"ngStyle\", 4, \"ngIf\"], [1, \"sidebar-background\", 3, \"ngStyle\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"scroll-top\", 3, \"click\"], [1, \"ft-arrow-up\"]],\n    template: function FullLayoutComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"app-navbar\", 0);\n        i0.ɵɵlistener(\"seachTextEmpty\", function FullLayoutComponent_Template_app_navbar_seachTextEmpty_0_listener($event) {\n          return ctx.checkNavbarSeachTextEmpty($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵlistener(\"click\", function FullLayoutComponent_Template_div_click_1_listener() {\n          return ctx.onWrapperClick();\n        })(\"resize\", function FullLayoutComponent_Template_div_resize_1_listener($event) {\n          return ctx.onResize($event);\n        }, false, i0.ɵɵresolveWindow);\n        i0.ɵɵtemplate(2, FullLayoutComponent_app_horizontal_menu_2_Template, 1, 0, \"app-horizontal-menu\", 2);\n        i0.ɵɵtemplate(3, FullLayoutComponent_div_3_Template, 3, 8, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵelementStart(5, \"div\", 5);\n        i0.ɵɵelement(6, \"div\", 6);\n        i0.ɵɵelementStart(7, \"div\", 7);\n        i0.ɵɵelement(8, \"router-outlet\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"app-footer\");\n        i0.ɵɵtemplate(10, FullLayoutComponent_button_10_Template, 2, 0, \"button\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"app-notification-sidebar\");\n        i0.ɵɵelementStart(12, \"div\", 9);\n        i0.ɵɵlistener(\"click\", function FullLayoutComponent_Template_div_click_12_listener($event) {\n          return ctx.onOutsideClick($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"div\", 10);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c2, !ctx.isNavbarSeachTextEmpty));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.menuPosition === \"Top\" && !ctx.displayOverlayMenu);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.menuPosition === \"Side\" || ctx.displayOverlayMenu);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.isScrollTopVisible);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(7, _c3, ctx.displayOverlayMenu && ctx.hideSidebar && !ctx.overlayContent, ctx.displayOverlayMenu && !ctx.hideSidebar && ctx.overlayContent && ctx.innerWidth < 1200));\n      }\n    },\n    directives: [i7.NavbarComponent, i8.NgClass, i8.NgIf, i4.RouterOutlet, i9.FooterComponent, i10.NotificationSidebarComponent, i11.HorizontalMenuComponent, i12.TopMenuDirective, i13.SidebarDirective, i14.VerticalMenuComponent, i8.NgStyle],\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  return FullLayoutComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}