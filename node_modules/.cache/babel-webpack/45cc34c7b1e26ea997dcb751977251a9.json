{"ast":null,"code":"import { HttpErrorResponse } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../service/auth/auth.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(router, authService) {\n      this.router = router;\n      this.authService = authService;\n    }\n\n    intercept(req, next) {\n      const token = localStorage.getItem(\"adm_token\");\n      const authReq = req.clone({\n        headers: req.headers.set(\"Authorization\", `Bearer ${token}`)\n      });\n      return next.handle(authReq).pipe(catchError(err => {\n        console.log(\"Err :: \", err);\n\n        if (err instanceof HttpErrorResponse) {\n          console.log({\n            err\n          }); // Check for unauthorized user\n\n          if (err.status == 401) {\n            this.authService.currentUserSubject.next(undefined);\n            this.router.navigate([\"/login\"]);\n          } // this.errorMessage = err.error?.message ?? 'Something went wrong';\n\n\n          return throwError(err);\n        } else {\n          console.log(\"Client error\");\n        }\n      }));\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}