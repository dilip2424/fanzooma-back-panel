{"ast":null,"code":"import { fromEvent } from 'rxjs';\nimport { ConnectionPositionPair } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { untilDestroyed } from 'ngx-take-until-destroy';\nimport { NavigationEnd } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/cdk/overlay\";\nimport * as i3 from \"@angular/router\";\nexport let AutocompleteDirective = /*#__PURE__*/(() => {\n  class AutocompleteDirective {\n    constructor(host, ngControl, vcr, overlay, router) {\n      this.host = host;\n      this.ngControl = ngControl;\n      this.vcr = vcr;\n      this.overlay = overlay;\n      this.router = router;\n    }\n\n    get control() {\n      return this.ngControl.control;\n    }\n\n    ngOnInit() {\n      fromEvent(this.origin, 'focus').pipe(untilDestroyed(this)).subscribe(() => {\n        this.openDropdown();\n        this.appAutocomplete.optionsClick().pipe(takeUntil(this.overlayRef.detachments())).subscribe(value => {\n          this.control.setValue(value);\n          this.close();\n        });\n      });\n      this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(routeChange => {\n        this.close();\n      });\n    }\n\n    openDropdown() {\n      this.close();\n      this.overlayRef = this.overlay.create({\n        width: this.origin.offsetWidth,\n        maxHeight: 40 * 3,\n        backdropClass: '',\n        scrollStrategy: this.overlay.scrollStrategies.reposition(),\n        positionStrategy: this.getOverlayPosition()\n      });\n      const template = new TemplatePortal(this.appAutocomplete.rootTemplate, this.vcr);\n      this.overlayRef.attach(template);\n      overlayClickOutside(this.overlayRef, this.origin).subscribe(() => this.close());\n    }\n\n    ngOnDestroy() {}\n\n    close() {\n      if (this.overlayRef) {\n        this.overlayRef.detach();\n      }\n\n      this.overlayRef = null;\n    }\n\n    getOverlayPosition() {\n      const positions = [new ConnectionPositionPair({\n        originX: 'start',\n        originY: 'bottom'\n      }, {\n        overlayX: 'start',\n        overlayY: 'top'\n      }), new ConnectionPositionPair({\n        originX: 'start',\n        originY: 'top'\n      }, {\n        overlayX: 'start',\n        overlayY: 'bottom'\n      })];\n      return this.overlay.position().flexibleConnectedTo(this.origin).withPositions(positions).withFlexibleDimensions(false).withPush(false);\n    }\n\n    get origin() {\n      return this.host.nativeElement;\n    }\n\n  }\n\n  AutocompleteDirective.ɵfac = function AutocompleteDirective_Factory(t) {\n    return new (t || AutocompleteDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.NgControl), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i2.Overlay), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  AutocompleteDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: AutocompleteDirective,\n    selectors: [[\"\", \"appAutocomplete\", \"\"]],\n    inputs: {\n      appAutocomplete: \"appAutocomplete\"\n    }\n  });\n  return AutocompleteDirective;\n})();\nexport function overlayClickOutside(overlayRef, origin) {\n  return fromEvent(document, 'click').pipe(filter(event => {\n    const clickTarget = event.target;\n    const notOrigin = clickTarget !== origin; // the input\n\n    const notOverlay = !!overlayRef && overlayRef.overlayElement.contains(clickTarget) === false; // the autocomplete\n\n    return notOrigin && notOverlay;\n  }), takeUntil(overlayRef.detachments()));\n}","map":null,"metadata":{},"sourceType":"module"}