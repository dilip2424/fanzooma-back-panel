{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/config.service\";\nimport * as i3 from \"../services/layout.service\";\nexport let SidebarDirective = /*#__PURE__*/(() => {\n  class SidebarDirective {\n    constructor(cdr, router, configService, layoutService) {\n      this.cdr = cdr;\n      this.router = router;\n      this.configService = configService;\n      this.layoutService = layoutService;\n      this.navlinks = [];\n      this.config = {};\n      this.mouseEnter = false;\n      this.sidebarExpanded = true;\n      this.config = this.configService.templateConf;\n      this.sidebarExpanded = !this.config.layout.sidebar.collapsed;\n    }\n\n    get navExpanded() {\n      return this._navExpanded;\n    }\n\n    set navExpanded(value) {\n      this._navExpanded = value;\n    }\n\n    ngOnInit() {\n      this.innerWidth = window.innerWidth;\n      this.layoutSub = this.configService.templateConf$.subscribe(templateConf => {\n        if (templateConf) {\n          this.config = templateConf;\n        }\n\n        this.loadLayout();\n        this.cdr.markForCheck();\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.layoutSub) {\n        this.layoutSub.unsubscribe();\n      }\n    } //load layout when changes in the config\n\n\n    loadLayout() {\n      this.sidebarExpanded = !this.config.layout.sidebar.collapsed;\n\n      if (this.config.layout.sidebar.collapsed && !this.mouseEnter) {\n        this.setSidebarGroupActiveCollapsed();\n        this.navExpanded = false;\n      } else {\n        this.setSidebarGroupActive();\n        this.navExpanded = true;\n      }\n    } //add menu links to the link list\n\n\n    addLink(link) {\n      this.navlinks.push(link);\n    } //close all other menu items other than active one\n\n\n    closeOtherLinks(openLink) {\n      this.navlinks.forEach(link => {\n        if (link != openLink && (openLink.level.toString() === \"1\" || link.level === openLink.level)) {\n          link.open = false;\n          link.sidebarGroupActive = false;\n        } else if (link === openLink && openLink.level.toString() === \"1\" && link.hasSub === true) {\n          link.sidebarGroupActive = true;\n        } else if (link === openLink && openLink.level.toString() === \"1\" && link.hasSub === false) {\n          link.sidebarGroupActive = false;\n          link.open = false;\n        } else if (link === openLink && openLink.level.toString() != \"1\" && link.hasSub === false) {\n          link.open = false;\n          link.sidebarGroupActive = false;\n          return;\n        }\n      });\n    }\n\n    ngAfterViewInit() {} // call when sidebar toggle is collapsed but still in expand mode on mouse hover\n\n\n    setSidebarGroupActive() {\n      if (this.navlinks.length > 0) {\n        this.navlinks.forEach(link => {\n          link.sidebarGroupActive = false;\n          link.navCollapsedOpen = false;\n        });\n        let matched = this.navlinks.find(link => link.path === this.router.url);\n\n        if (matched) {\n          let parent = this.navlinks.find(link => link.parent === matched.parent && link.level.toString() === \"1\" && link.hasSub === true);\n\n          if (parent) {\n            parent.sidebarGroupActive = true;\n            parent.navCollapsedOpen = false;\n            parent.open = true;\n          }\n        }\n      }\n    } // call when sidebar toggle is collapsed and is in collapse mode on mouse out\n\n\n    setSidebarGroupActiveCollapsed() {\n      this.closeOtherLinks(this.navlinks.find(link => link.path === this.router.url));\n\n      if (this.navlinks.length > 0) {\n        this.navlinks.forEach(link => {\n          link.sidebarGroupActive = false;\n          link.navCollapsedOpen = false;\n        });\n        let matched = this.navlinks.find(link => link.path === this.router.url);\n\n        if (matched) {\n          let parent = this.navlinks.find(link => link.parent === matched.parent && link.level.toString() === \"1\" && link.hasSub === true);\n\n          if (parent) {\n            parent.sidebarGroupActive = true;\n            parent.navCollapsedOpen = true;\n            parent.open = false;\n          }\n        }\n      }\n    } // mouse enter event of side menu\n\n\n    onMouseOver(e) {\n      this.mouseEnter = true;\n\n      if (this.config.layout.sidebar.collapsed) {\n        this.setSidebarGroupActive();\n        this.navExpanded = true;\n      }\n    } // mouse leave event of side menu\n\n\n    onMouseOut(e) {\n      this.mouseEnter = false;\n\n      if (this.config.layout.sidebar.collapsed) {\n        this.setSidebarGroupActiveCollapsed();\n        this.navExpanded = false;\n      }\n    }\n\n  }\n\n  SidebarDirective.ɵfac = function SidebarDirective_Factory(t) {\n    return new (t || SidebarDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.ConfigService), i0.ɵɵdirectiveInject(i3.LayoutService));\n  };\n\n  SidebarDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: SidebarDirective,\n    selectors: [[\"\", \"appSidebar\", \"\"]],\n    hostVars: 2,\n    hostBindings: function SidebarDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mouseenter\", function SidebarDirective_mouseenter_HostBindingHandler($event) {\n          return ctx.onMouseOver($event);\n        })(\"mouseleave\", function SidebarDirective_mouseleave_HostBindingHandler($event) {\n          return ctx.onMouseOut($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"expanded\", ctx.navExpanded);\n      }\n    },\n    inputs: {\n      navExpanded: \"navExpanded\"\n    }\n  });\n  return SidebarDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}