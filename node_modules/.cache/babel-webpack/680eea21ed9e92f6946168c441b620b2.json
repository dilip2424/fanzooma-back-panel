{"ast":null,"code":"import { environment } from \"environments/environment\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { finalize } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/service/auth/auth.service\";\nexport let DashboardService = /*#__PURE__*/(() => {\n  class DashboardService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n      this._isLoading$ = new BehaviorSubject(false);\n      this._isLoadingtable$ = new BehaviorSubject(false);\n      this.apiUrl = environment.apiUrl;\n    }\n\n    get isLoading$() {\n      return this._isLoading$.asObservable();\n    }\n\n    get isLoadingtable$() {\n      return this._isLoadingtable$.asObservable();\n    }\n\n    getaccountdata(params) {\n      return this.http.post(`${this.apiUrl}/dashboard/account`, params);\n    }\n\n    getcontentdata(params) {\n      return this.http.post(`${this.apiUrl}/dashboard/content`, params);\n    }\n\n    getrevenuedata(params) {\n      return this.http.post(`${this.apiUrl}/dashboard/revenue`, params);\n    }\n\n    getallDataGraphAccount(params) {\n      this._isLoadingtable$.next(true);\n\n      return this.http.post(`${this.apiUrl}/dashboard/account/all/request`, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n    getallDataGraphContent(params) {\n      this._isLoadingtable$.next(true);\n\n      return this.http.post(`${this.apiUrl}/dashboard/content/all/request`, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n    getallDataGraphRevenue(params) {\n      this._isLoadingtable$.next(true);\n\n      return this.http.post(`${this.apiUrl}/dashboard/revenue/all/request`, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n    getDashboardTableListing(params) {\n      this._isLoading$.next(true);\n\n      const role = this.authService.currentusertype();\n      let paginateAPI = `${this.apiUrl}/dashboard/creator/paginate`;\n\n      if (role == \"right_holder\") {\n        paginateAPI = `${this.apiUrl}/dashboard/rights/holder/paginate`;\n      }\n\n      return this.http.post(paginateAPI, params).pipe(finalize(() => {\n        this._isLoading$.next(false);\n      }));\n    }\n\n    getDashboardCreatorGraph(params) {\n      this._isLoadingtable$.next(true);\n\n      let paginateAPI = `${this.apiUrl}/dashboard/creator/graph`;\n      return this.http.post(paginateAPI, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n    getDashboardRightHolderGraph(params) {\n      this._isLoadingtable$.next(true);\n\n      const role = this.authService.currentusertype();\n      let paginateAPI = `${this.apiUrl}/dashboard/rights/holder/graph`;\n      return this.http.post(paginateAPI, params).pipe(finalize(() => {\n        this._isLoadingtable$.next(false);\n      }));\n    }\n\n  }\n\n  DashboardService.ɵfac = function DashboardService_Factory(t) {\n    return new (t || DashboardService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n\n  DashboardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DashboardService,\n    factory: DashboardService.ɵfac,\n    providedIn: \"root\"\n  });\n  return DashboardService;\n})();","map":null,"metadata":{},"sourceType":"module"}